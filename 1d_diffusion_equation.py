# -*- coding: utf-8 -*-
"""1D-Diffusion_equation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jA9eLfAatr6IWElIpf6I_S4gwe7OaWTb
"""

import numpy as np

import matplotlib.pyplot as plt
from tqdm import tqdm

class Diffusion:

  def __init__(self):
    self.L = 1.0 
    self.t0 = 0.0 
    self.dt = 1.5
    self.tmax = 6*3600 # 6 stands for hours, transform in seconds
    self.dx = 0.01
    self.nx = int(np.floor((self.L-0.)/self.dx))+1
    self.nt = int(np.floor((self.tmax-self.t0)/self.dt))+1
    self.k = 2.9E-5
    self.r = self.k*self.dt/self.dx**2
    self.x = np.linspace(0.0,self.L,self.nx+1)
    self.T0 = 273.15
    self.Tn = 273.15
    self.hourPlot = [(i*3600) for i in range(1,7)]
    self.ColorList = ['b','g','y','r','k','c','m']

  def Init_cond(self,x):
    if x<=0.5 and x>=0.:
      return 273.15+np.sin(np.pi*50.*x)+20.*x
    elif x>0.5 and x<=1.:
      return 273.15+np.sin(np.pi*50.*x)-20.*x+20.
    else:
      return 0.0

  def BoundaryCond(self,phi):
    phi[0]=273.15
    phi[-1]=273.15
    return phi

  def mod(self,n,r):
    return n%r

  def InitialFunct(self):
    phi_new = np.array(list(map(self.Init_cond,self.x))) 
    phi_prev = phi_new.copy()
    return phi_new, phi_prev

  def Process(self):
    theta2, theta1 = self.InitialFunct()
    theta2 = self.BoundaryCond(theta2)
    time = self.t0
    plt.figure(figsize=(12,8))
    i_plot = 0
    plt.plot(self.x,theta2,
             label='t=%sh'%(0),
             color=self.ColorList[i_plot],
             linestyle='--',linewidth=2)
    for t_grid in tqdm(range(self.nt)):
      time = time + self.dt
      for x_grid in range(1,self.nx-1):
        theta1[1:self.nx] = (theta2[1:-1] +
                self.r*(theta2[2:]-2.*theta2[1:-1]+theta2[:-2]))
      theta1 = self.BoundaryCond(theta1)
      theta2[:] = theta1[:]
      if int(time) in self.hourPlot:
          i_plot = i_plot + 1
          pl = int(time)
          plt.plot(self.x,theta2,
              label='t=%sh'%(pl/3600),
              color=self.ColorList[i_plot],
              linestyle='--',linewidth=2)
    plt.xlabel('Length (m)')
    plt.ylabel('Temperature (K)')
    plt.legend()
    plt.grid()
    plt.show()

dd = Diffusion()
dd.Process()
