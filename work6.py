# -*- coding: utf-8 -*-
"""work6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UO-OwRF3mE0gkumMd7XCcMyvvT_9TjlP
"""

import numpy as np
import matplotlib.pyplot as plt
# from tqdm import tqdm
# import latexify

L = 1.0  
tmax = 6 
dx = 0.01
nx = int(L/dx)+1
dt = 350.
nt = int((3600*6.)/dt)
k = 0.000029
d0 = 273.15

r = k*dt/dx**2

def Init_cond(x):
  if x<=0.5 and x>=0.:
    return d0 + np.sin(np.pi*50.*x) + 20.*x
  elif x>0.5 and x<=1.:
    return d0 + np.sin(np.pi*50.*x) - 20.*x + 20.
  else:
    return 0.0

def mod(n,r):
  return n%r

def TDMA(a,b,c,d):
  n = np.shape(b)[0]
  F = np.zeros(n)
  delta = np.zeros(n)

  X = np.copy(d)

  F[0] = 0.0  #F[0]=0.0
  for i in range(1,n):
    F[i] = c[i-1] / (b[i]-a[i-1]*F[i-1])

  delta[0] = d[0]
  for j in range(1,n):
    delta[j] = (d[j] - a[j-1]*delta[j-1])/(b[j]-a[j-1]*F[j-1])
  
  X[n] = d[n]  #Assign First value of delta on the last position of X array
  for k in range(n-1,0,-1):
    X[k] = delta[k] - F[k]*X[k+1]

  return X

A = np.zeros(nx-2)
B = np.zeros(nx-1)
C = np.zeros(nx-2)
D = np.zeros(nx)
A[:] = -r
C[:] = -r
B[:] = 1.+2.*r
x = np.linspace(0.0,L,nx)
D = np.array(list(map(Init_cond,x)))

D_new = D.copy()
t = 0.0
dd_t = []
plt.figure(figsize=(12,8))
plt.plot(x,D_new,label='Original signal')
while t<tmax*3600.+dt:
  t +=  dt
  D_new[:] = TDMA(A,B,C,D)
  dd_t.append(t/3600.)
  if mod(t,3600.) < dt:
    plt.plot(x,D_new,label=r'$\phi(%sh)$'%int(t/3600.))
  D[:] = D_new[:]

plt.xlabel('Length (m)')
plt.ylabel('Temperature (K)')
plt.vlines(x=0.5,ymin=272.,ymax=284.)
plt.grid('on')
plt.legend()
plt.title(r'Equation to solve: $\frac{\partial \phi}{\partial t}=K \ \frac{\partial^2\phi}{\partial x^2}$ at $\Delta t=350.$ and $K=2.9\times 10^{-9}$',fontname="Times New Roman", fontweight="bold")
plt.show()
